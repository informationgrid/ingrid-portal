<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <groupId>de.ingrid.portal</groupId>
    <artifactId>ingrid-portal-project</artifactId>
    <version>3.5.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>de.ingrid.portal</groupId>
  <artifactId>ingrid-portal-mdek-application</artifactId>
  <packaging>war</packaging>
  <name>Ingrid Portal MDEK Application</name>
  <scm>
    <connection>scm:svn:https://harrison.its-technidata.de/svn/ingrid/ingrid-portal/branches/ingrid-portal-3.5_REDMINE-304_JetspeedMigration/ingrid-portal-mdek-application</connection>
    <developerConnection>scm:svn:https://harrison.its-technidata.de/svn/ingrid/ingrid-portal/branches/ingrid-portal-3.5_REDMINE-304_JetspeedMigration/ingrid-portal-mdek-application</developerConnection>
  </scm>
  <build>
    <finalName>ingrid-portal-mdek-application</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <!-- Copy xml files in java folders to target (Hibernate mapping files) -->
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <!-- "DISABLE" WAGON PLUGIN TO AVOID EMPTY UPLOAD DIRECTORIES FROM SUBMODULES -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>wagon-maven-plugin</artifactId>
        <configuration>
          <fromDir>NOT_EXISITING_DIRECTORY</fromDir>
          <url>/dev/null</url>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.9</version>
        <inherited>true</inherited>
        <configuration>
          <wtpversion>1.5</wtpversion>
          <downloadSources>1.5</downloadSources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <warSourceExcludes>TEST_*.*,test_*.*,dev_*.*,dojo-release-1.6.0/**,dojo-src/util/**,dojo-src/dojo/**,dojo-src/dijit/**,dojo-src/dojox/**</warSourceExcludes>
          <!-- NOTICE: supply log4j.jar and commons-logging.jar in war, SO log4j.properties IS READ FROM WEBAPP !!!! -->
          <!-- Tomcat is configured for log4j, so if NO log4j.jar is supplied in war, log4j.properties is read from tomcat/common/classes, ignoring the one in the war !!! -->
          <packagingExcludes>**/ingrid-utils.jar,**/ingrid-mdek-api*.jar,**/ehcache*.jar,**/servlet-api*.jar,**/jetspeed-api*.jar</packagingExcludes>
          <!-- ALSO CREATE JAR !!! NO WAY TO ADD NO CLASSIFIER TO NAME OF JAR, DEFAULT IS "classes" -> WILL BE ADDED to name of .jar -->
          <attachClasses>true</attachClasses>
          <classesClassifier />
          <!-- CONFIG-FILES needed at runtime in classes-path, so keep all underneath WEB-INF/classes and DO NOT bundle as .jar in war file -->
          <archiveClasses>false</archiveClasses>
        </configuration>
      </plugin>
      <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
      <!-- HACK: Upload JAR file WITHOUT "-classes" in name, so MAVEN1 can handle it (no classifier "classes" possible in maven1) !!! -->
      <!-- NOT NEEDED ANYMORE: Now MAVEN2, so we use classifier "classes" in dependencies !  So always ingrid-portal-mdek-application-XXX-classes.jar -->
<!--
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>wagon-maven-plugin</artifactId>
        <version>1.0-beta-1</version>
        <executions>
          <execution>
            <id>upload-jar</id>
            <phase>deploy</phase>
            <goals>
              <goal>upload-single</goal>
            </goals>
            <configuration>
              <fromFile>target/${project.artifactId}-classes.jar</fromFile>
              <url>file:///srv/www/htdocs/ingrid/maven2/de/ingrid/portal/${project.artifactId}/${project.version}</url>
              <toFile>${project.artifactId}-${project.version}.jar</toFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
-->
      <plugin>
          <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.1</version>
            <executions>
                <execution>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>exec</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <!-- <executable>src/main/webapp/dojo-src/util/buildscripts/myBuild.bat</executable>-->
                <executable>java</executable>
                <classpathScope>runtime</classpathScope>
                <arguments>
                    <argument>-Dmyproperty=myvalue</argument>
                    <argument>-classpath</argument>
                    <argument>../shrinksafe/shrinksafe.jar</argument>
                    <argument>org.mozilla.javascript.tools.shell.Main</argument>
                    <argument>build.js</argument>
                    <argument>profile=ingrid</argument>
                    <argument>action=clean,release </argument>
                    <argument>cssOptimize=comments.keepLines</argument>
                    <argument>optimize=shrinkSafe</argument>
                    <argument>version=1.5.2-ingrid</argument>
                </arguments>
                <!-- optional -->
                <workingDirectory>src/main/webapp/dojo-src/util/buildscripts</workingDirectory>
            </configuration>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-changes-plugin</artifactId>
            <version>2.9</version>
            <configuration>
                <runOnlyAtExecutionRoot>true</runOnlyAtExecutionRoot>
                <smtpHost>localhost</smtpHost>
                <toAddresses />
            </configuration>
        </plugin>
    </plugins>
  </build>

  <!-- ==================== DEPENDENCY MANAGEMENT ==================== -->

  <dependencyManagement>
    <dependencies>
        <dependency>
          <groupId>opensymphony</groupId>
          <artifactId>quartz</artifactId>
          <version>1.7.3</version>
        </dependency>
        <dependency>
          <groupId>xerces</groupId>
          <artifactId>xercesImpl</artifactId>
          <version>2.10.0</version>
        </dependency>
        <dependency>
          <groupId>xml-apis</groupId>
          <artifactId>xml-apis</artifactId>
          <version>1.4.01</version>
        </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- ==================== DEPENDENCIES ==================== -->
  <dependencies>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <!-- LOG4J PROVIDED to avoid classloader conflicts ! Tomcat logging has to be configured (log4j.jar in common/lib) -->
      <!-- NO !!! LOG4J has to be in webapp, otherwise log4j.properties is read from tomcat/common/classes !!! no classloader conflicts ! -->
      <!-- errors are thrown during IGE startup ... logging still can be configured within webapp! -->
      <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>net.sf.ehcache</groupId>
        <artifactId>ehcache</artifactId>
        <scope>provided</scope>
      </dependency>
    <dependency>
      <groupId>de.ingrid.mdek</groupId>
      <artifactId>ingrid-mdek-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>de.ingrid</groupId>
      <artifactId>ingrid-utils-ige</artifactId>
    </dependency>
    <dependency>
      <groupId>de.ingrid</groupId>
      <artifactId>ingrid-utils</artifactId>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>xstream</groupId>
          <artifactId>xstream</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>de.ingrid</groupId>
      <artifactId>ingrid-external-service-sns</artifactId>
    </dependency>
    <dependency>
        <groupId>de.ingrid</groupId>
        <artifactId>ingrid-codelist-service</artifactId>
        <exclusions>
            <!-- XMLConstants will be overwritten otherwise! -->
            <exclusion>
                <groupId>stax</groupId>
                <artifactId>stax-api</artifactId>
            </exclusion>
        </exclusions>
    </dependency>

<!-- ======================================================= -->
<!-- WHY USE MDEK BACKEND SERVICES ??? Just used for GenericHibernateDao etc. stuff ! should be separated ! -->
    <dependency>
      <groupId>de.ingrid.mdek</groupId>
      <artifactId>ingrid-mdek-services</artifactId>
        <exclusions>
          <exclusion>
            <groupId>ojdbc</groupId>
            <artifactId>ojdbc</artifactId>
          </exclusion>
        </exclusions>
    </dependency>
<!-- also included via transitive dependencies from ingrid-mdek-services, BUT KEEP HERE TO USE WHEN services sparated (see above) -->
    <dependency>
      <groupId>de.ingrid.mdek</groupId>
      <artifactId>ingrid-import-export</artifactId>
    </dependency>
      <dependency>
        <groupId>dom4j</groupId>
        <artifactId>dom4j</artifactId>
        <exclusions>
          <!--  xml-apis already included in java 1.6 -->
          <!-- leads to eclipse compiler problems -->
          <exclusion>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate</artifactId>
        <!-- Because of asm version conflicts with cglib spring, we can't use the normal cglib dependency of hibernate
                Rather we use the cglib-nodep lib, which has its own implementation of asm. -->
        <exclusions>
          <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm-attrs</artifactId>
          </exclusion>
          <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm</artifactId>
          </exclusion>
          <exclusion>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-annotations</artifactId>
        <exclusions>
          <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm-attrs</artifactId>
          </exclusion>
          <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm</artifactId>
          </exclusion>
          <exclusion>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

<!-- ======================================================= -->

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>taglibs</groupId>
      <artifactId>standard</artifactId>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.portals.jetspeed-2</groupId>
      <artifactId>jetspeed-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>opensymphony</groupId>
      <artifactId>quartz</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.htmlparser</groupId>
      <artifactId>htmlparser</artifactId>
      <version>1.6</version>
    </dependency>
    <dependency>
      <groupId>org.directwebremoting</groupId>
      <artifactId>dwr</artifactId>
      <!-- <version>3.0.dev-02.03.11</version> problem with converting bean SelectControl! -->
      <version>3.0.dev</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
      <version>2.5.6</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>1.8</version>
    </dependency>
    <dependency>
      <groupId>velocity</groupId>
      <artifactId>velocity</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-all</artifactId>
        <version>1.9.5</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>2.5.6</version>
      <scope>test</scope>
    </dependency>
    <!-- JENA libs for RDF support -->
    <dependency>
      <groupId>org.apache.jena</groupId>
      <artifactId>jena-arq</artifactId>
      <version>2.9.3</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <version>1.4.01</version>
    </dependency>
    <!-- need geo-utils to calculate bounding boxes in other formats -->
    <dependency>
      <groupId>de.ingrid</groupId>
      <artifactId>ingrid-utils-geo</artifactId>
    </dependency>
    <!-- this lib might be needed(?) for utils-geo when transforming coordinates  -->
    <!-- <dependency>
      <groupId>javax.media</groupId>
      <artifactId>jai-core</artifactId>
      <version>1.1.3</version>
    </dependency> -->
  </dependencies>
  <repositories>
    <repository>
      <id>de.ingrid.all</id>
      <name>InGrid Repo Maven</name>
      <url>http://harrison.its-technidata.de/archiva/repository/ingrid-all</url>
    </repository>
    <!-- <repository>
      <id>apache-repo-releases</id>
      <url>https://repository.apache.org/content/repositories/releases/</url>
      <releases>
       <enabled>true</enabled>
      </releases>
    </repository>-->
  </repositories>
  <profiles>
    <profile>
      <id>gssoil</id>
      <build>
        <plugins>
          <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
          <!-- unzip all GSSoil Thesaurus Gazetteer resources and libs to target -->
          <!-- USE THIS IF YOU SUPPLY IGE FOR GS SOIL -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-gssoil</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>gssoil</groupId>
                      <artifactId>thesaurus-gazetteer-resources</artifactId>
                      <version>2.0.1</version>
                      <type>zip</type>
                      <outputDirectory>${project.build.directory}/${project.artifactId}/WEB-INF/classes</outputDirectory>
                    </artifactItem>
                    <artifactItem>
                      <groupId>gssoil</groupId>
                      <artifactId>thesaurus-gazetteer-libs</artifactId>
                      <version>2.0.1</version>
                      <type>zip</type>
                      <outputDirectory>${project.build.directory}/${project.artifactId}/WEB-INF/lib</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
<!-- NO SEPARATE REPO LIBS FOR GSSOIL ! WE EXTRACT EVERYTHING FROM ZIP FILE (see above, "thesaurus-gazetteer-libs") !
SO WE CAN JUST UPDATE LIBS FROM EDISOFT DELIVERIES !
      <dependencies>
        <dependency>
          <groupId>net.htmlparser.jericho</groupId>
          <artifactId>jericho-html</artifactId>
          <version>3.1</version>
        </dependency>
      </dependencies>
      <repositories>
        <repository>
          <id>ibiblio</id>
          <name>iBiblio.or.</name>
          <url>http://mirrors.ibiblio.org/pub/mirrors/maven2</url>
        </repository>
      </repositories>
-->
    </profile>
  </profiles>
</project>
